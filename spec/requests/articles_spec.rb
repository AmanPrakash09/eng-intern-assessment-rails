require 'rails_helper'

# This spec was mainly generated by rspec-rails when you ran the scaffold generator.

RSpec.describe "/articles", type: :request do
  
  # This should return the minimal set of attributes required to create a valid Article
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # Add valid article, makes GET request to the index URL that lists articles, and check that the response is successful
  describe "GET /index" do
    it "renders a successful response" do
      article = Article.create!(title: 'Sample Title', content: 'Lorem ipsum')
      get articles_url
      expect(response).to be_successful
    end
  end

  # Add valid article, makes GET request to the URL corresponding to that article, and check that the response is successful
  describe "GET /show" do
    it "renders a successful response" do
      article = Article.create!(title: 'Sample Title', content: 'Lorem ipsum')
      get article_url(article)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_article_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      article = Article.create!(title: 'Sample Title', content: 'Lorem ipsum')
      get edit_article_url(article)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    let(:valid_attributes) {
      { title: 'Sample Title', content: 'Lorem ipsum' }
    }

    let(:invalid_attributes) {
      skip(content: 'Lorem ipsum')
    }

    context "with valid parameters" do
      it "creates a new Article" do
        expect {
          post articles_url, params: { article: valid_attributes }
        }.to change(Article, :count).by(1)
      end

      it "redirects to the created article" do
        post articles_url, params: { article: valid_attributes }
        expect(response).to redirect_to(article_url(Article.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Article" do
        # We need to ensure that an article with invalid parameters is not saved to the database
        expect {
          post articles_url, params: { article: invalid_attributes }
        }.to change(Article, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        # We need to ensure that the form is re-rendered when creating an article with invalid parameters
        post articles_url, params: { article: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    let(:invalid_attributes) {
      skip(content: 'Lorem ipsum')
    }

    context "with valid parameters" do
      let(:new_attributes) {
        skip( title: 'Updated Title', content: 'Updated content' )
      }

      it "updates the requested article" do
        article = Article.create!(title: 'Sample Title', content: 'Lorem ipsum')
        patch article_url(article), params: { article: new_attributes }
        article.reload
        expect(article.title).to eq('Updated Title')
        expect(article.content).to eq('Updated content')
      end

      it "redirects to the article" do
        article = Article.create!(title: 'Sample Title', content: 'Lorem ipsum')
        patch article_url(article), params: { article: new_attributes }
        article.reload
        expect(response).to redirect_to(article_url(article))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        article = Article.create!(title: 'Sample Title', content: 'Lorem ipsum')
        patch article_url(article), params: { article: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested article" do
      article = Article.create!(title: 'Sample Title', content: 'Lorem ipsum')
      expect {
        delete article_url(article)
      }.to change(Article, :count).by(-1)
    end

    it "redirects to the articles list" do
      article = Article.create!(title: 'Sample Title', content: 'Lorem ipsum')
      delete article_url(article)
      expect(response).to redirect_to(articles_url)
    end
  end
end
